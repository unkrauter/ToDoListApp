{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","react_default","a","createElement","className","key","type","id","value","text","onChange","e","setUpdate","target","index_es","onClick","deleteItem","icon","react_flip_move_es","duration","easing","library","add","faTrash","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentItem","addItem","bind","assertThisInitialized","handleInput","preventDefault","newItem","concat","toConsumableArray","setState","Date","now","filteredItems","filter","console","log","objectSpread","onSubmit","placeholder","src_ListItems","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.516e5585.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n   {\r\n       return <div className=\"list\" key={item.key}>\r\n     <p>\r\n         <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\r\n             props.setUpdate(e.target.value,item.key)}}/>\r\n        <span>\r\n       \r\n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n            props.deleteItem(item.key)\r\n        }} icon=\"trash\" />\r\n        </span>\r\n     </p>\r\n     \r\n    </div>})\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n    \r\n    </div>;\r\n  }\r\n\r\n  export default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const items = [...this.state.items, newItem];\n    this.setState({\n      items: items,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n    }\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n\n  }\n  setUpdate(text, key) {\n    console.log(\"items: \" + this.state.items);\n    const items = this.state.items.map(item => {\n      if (item.key === key) {\n        console.log(item.key + \"    \" + key);\n        return {\n          ...item,\n          text: text\n        };\n      }\n      return item;\n    });\n    this.setState({\n      items: items\n    });\n  \n    \n   \n  }\n render(){\n  return (\n    <div className=\"App\">\n      <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter task\" value= {this.state.currentItem.text} onChange={this.handleInput}></input>\n          <button type=\"submit\">Add</button>\n        </form>\n        <p>{this.state.items.text}</p>\n        \n          <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n        \n      </header>\n    </div>\n  );\n }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}